- name: Create Arch Linux rootfs chroot
  hosts: localhost
  vars:
    ansible_become: yes
    build_dir: '{{playbook_dir}}/build'
    chroot_dir: '{{build_dir}}/chroot'
    DEFAULT_ROOTFS_URL: 'http://os.archlinuxarm.org/os/ArchLinuxARM-armv7-latest.tar.gz'
    # -e rootfs_url=https://archriscv.felixc.at/images/archriscv-latest.tar.zst -e skip_signature=true
    # -e rootfs_url=https://mirror.csclub.uwaterloo.ca/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.zst
    rootfs_url_: '{{ rootfs_url | default(DEFAULT_ROOTFS_URL) }}'
  tags: chroot

  tasks:
    - name: 'Download Arch Linux from {{rootfs_url_}}'
      ansible.builtin.get_url:
        url: '{{rootfs_url_}}'
        dest: '{{build_dir}}/'
      register: download_original_rootfs
      tags: chroot_aquire

    - name: Download rootfs signature
      ansible.builtin.get_url:
        url: '{{rootfs_url_}}.sig'
        dest: '{{build_dir}}'
      register: download_signature
      when: skip_signature is not defined
      tags: chroot_aquire

    - name: Check GPG Signature of original downloaded rootfs
      ansible.builtin.shell:
        chdir: '{{build_dir}}'
        cmd: |
          gpg --import '{{playbook_dir}}/archlinuxarm.gpg' &&
          gpg --import '{{playbook_dir}}/archlinux.gpg' &&
          gpg --verify '{{download_signature.dest}}' '{{download_original_rootfs.dest}}'
      when: skip_signature is not defined
      tags: chroot_aquire

    - name: Create Arch Linux directory
      ansible.builtin.file:
        path: '{{chroot_dir}}'
        state: directory
      tags: chroot_aquire

    - name: Extract Arch Linux
      ansible.builtin.unarchive:
        remote_src: yes
        src: '{{download_original_rootfs.dest}}'
        dest: '{{chroot_dir}}'
        creates: '{{chroot_dir}}/var/log' # about the last thing from that archive
      tags: chroot_aquire

    - name: Move Archlinux x86 to outer folder
      ansible.builtin.shell:
        chdir: '{{chroot_dir}}'
        cmd: mv root.x86_64/* .
        creates: 'bin/'
        removes: 'root.x86_64/bin/'
      tags: chroot_aquire

    - name: Clean up x86 Archlinux
      ansible.builtin.file:
        path: '{{chroot_dir}}/{{item}}'
        state: absent
      with_items:
        - root.x86_64/
        - version
        - pkglist.x86_64.txt
      tags: chroot_aquire

    - name: 'Enable {{rootfs_url_ | urlsplit("hostname")}} in mirrorlist'
      ansible.builtin.replace:
        dest: '{{chroot_dir}}/etc/pacman.d/mirrorlist'
        regexp: '^#(.*{{rootfs_url_ | urlsplit("hostname")}}.*)$'
        replace: '\1'
      tags: chroot_aquire, mirrorlist

    - name: Bootstrap chroot (install python for ansible)
      ansible.builtin.shell:
        chdir: '{{playbook_dir}}'
        cmd: |
          './chroot.sh' {{chroot_dir}} bash -c '
            pacman-key --init;
            pacman-key --populate;
            pacman -Sy python --noconfirm
          '
        creates:
          '{{chroot_dir}}/usr/bin/python'
        # If things around here fail, replace "-Sy" with "-Syu",
        # since there's probably been a major change.
        # It's not like that by default since it takes much longer to execute
      tags: chroot_aquire

    - name: Add chroot host to inventory
      ansible.builtin.add_host:
        groups: archlinux
        name: archlinux-chroot
        ansible_connection: community.general.chroot
        ansible_host: '{{chroot_dir}}'
        ansible_chroot_exe: '{{playbook_dir}}/chroot.sh'
        ansible_python_interpreter: '/usr/bin/python'
      tags: chroot_inventory


- name: Installation of packages and things as root
  hosts: archlinux
  vars:
    ansible_become: yes

  tasks:
    - name: Enable pacman.conf ParallelDownloads
      ansible.builtin.lineinfile:
          dest: /etc/pacman.conf
          regexp: '^#ParallelDownloads'
          line: 'ParallelDownloads = 5'

    - name: Update packages
      community.general.pacman:
        update_cache: yes
        upgrade: yes
      tags: update

    - name: Install more "base" packages
      community.general.pacman:
        package:
          - sudo
          - git
          - base-devel
          - vim
          - nano
          - networkmanager
          - openssh
          - btrfs-progs
          - arch-install-scripts
          - python-setuptools
          - python-pip
        state: present
      tags: install

    - name: Install aux tool packages
      community.general.pacman:
        package:
          - lshw
          - usbutils # lsusb is here
          - htop
          - wget
          - man
          - stress
          - screen
        state: present
      tags: install

    - name: Make wheel sudoers with NOPASSWD
      ansible.builtin.lineinfile:
          dest: /etc/sudoers
          regexp: '^#.*%wheel.*NOPASSWD.*'
          line: '%wheel ALL=(ALL) NOPASSWD: ALL'
          validate: /usr/sbin/visudo -cf %s
      tags: provision

    - name: Enable and start NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        enabled: yes
      tags: provision

    - name: Disable systemd-networkd
      # Fights with NetworkManager, but is enabled by default on alarm.
      ansible.builtin.systemd:
        name: systemd-networkd
        enabled: false
      tags: provision

    - name: print-ip NetworkManager hook
      ansible.builtin.copy:
        src: '{{playbook_dir}}/files/90.print-ip.sh'
        dest: /etc/NetworkManager/dispatcher.d/90.print-ip.sh
        mode: '0755'
      tags: provision

    - name: Enable and start sshd
      ansible.builtin.systemd:
        name: sshd
        enabled: yes
      tags: provision

    - name: Use multiple cores when makepkg
      # This will help a lot, especially any chroot cross compilation
      ansible.builtin.lineinfile:
          dest: /etc/makepkg.conf
          regexp: '^#MAKEFLAGS'
          line: 'MAKEFLAGS="-j$(nproc)"'

    - name: Don't compress when makepkg
      # This is otherwise slow, unless we really care about size
      ansible.builtin.lineinfile:
          dest: /etc/makepkg.conf
          regexp: "^PKGEXT='.pkg.tar"
          line: "PKGEXT='.pkg.tar'"

    - ansible.builtin.file:
        path: /etc/systemd/system/getty@.service.d/
        state: directory

    - name: No clear screen getty in systemd
      # Fun blog post article I relate with: https://mywiki.wooledge.org/SystemdNoClear
      ansible.builtin.copy:
        dest: /etc/systemd/system/getty@.service.d/noclear.conf
        content: |
          [Service]
          TTYVTDisallocate=no
